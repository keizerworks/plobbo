/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as PrivateImport } from './routes/_private'
import { Route as PublicAuthImport } from './routes/_public/auth'
import { Route as PrivateNoOrganizationImport } from './routes/_private/no-organization'
import { Route as PrivateConfigureImport } from './routes/_private/_configure'
import { Route as PrivateBlogsIndexImport } from './routes/_private/blogs/index'
import { Route as PrivateUsersUserIdRouteImport } from './routes/_private/users/$user-id/route'
import { Route as PrivateBlogsBlogIdRouteImport } from './routes/_private/blogs/$blog-id/route'
import { Route as PrivateSubscribeProIndexImport } from './routes/_private/subscribe/pro/index'
import { Route as PrivateCheckoutStatusIndexImport } from './routes/_private/checkout/status/index'
import { Route as PrivateConfigureConfigureSettingsImport } from './routes/_private/_configure/configure/_settings'
import { Route as PrivateConfigureConfigureSettingsSettingsIndexImport } from './routes/_private/_configure/configure/_settings/settings/index'
import { Route as PrivateConfigureConfigureSettingsSettingsSubscriptionIndexImport } from './routes/_private/_configure/configure/_settings/settings/subscription/index'
import { Route as PrivateConfigureConfigureSettingsSettingsCustomDomainIndexImport } from './routes/_private/_configure/configure/_settings/settings/custom-domain/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const PrivateIndexLazyImport = createFileRoute('/_private/')()
const PrivateConfigureConfigureImport = createFileRoute(
  '/_private/_configure/configure',
)()
const PrivateUsersIndexLazyImport = createFileRoute('/_private/users/')()
const PrivateConfigureConfigureIndexLazyImport = createFileRoute(
  '/_private/_configure/configure/',
)()
const PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyImport =
  createFileRoute(
    '/_private/_configure/configure/_settings/settings/appearance/',
  )()

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PrivateIndexLazyRoute = PrivateIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
  import('./routes/_private/index.lazy').then((d) => d.Route),
)

const PublicAuthRoute = PublicAuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => PublicRoute,
} as any)

const PrivateNoOrganizationRoute = PrivateNoOrganizationImport.update({
  id: '/no-organization',
  path: '/no-organization',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateConfigureRoute = PrivateConfigureImport.update({
  id: '/_configure',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateConfigureConfigureRoute = PrivateConfigureConfigureImport.update({
  id: '/configure',
  path: '/configure',
  getParentRoute: () => PrivateConfigureRoute,
} as any)

const PrivateUsersIndexLazyRoute = PrivateUsersIndexLazyImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
  import('./routes/_private/users/index.lazy').then((d) => d.Route),
)

const PrivateBlogsIndexRoute = PrivateBlogsIndexImport.update({
  id: '/blogs/',
  path: '/blogs/',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
  import('./routes/_private/blogs/index.lazy').then((d) => d.Route),
)

const PrivateUsersUserIdRouteRoute = PrivateUsersUserIdRouteImport.update({
  id: '/users/$user-id',
  path: '/users/$user-id',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateBlogsBlogIdRouteRoute = PrivateBlogsBlogIdRouteImport.update({
  id: '/blogs/$blog-id',
  path: '/blogs/$blog-id',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
  import('./routes/_private/blogs/$blog-id/route.lazy').then((d) => d.Route),
)

const PrivateConfigureConfigureIndexLazyRoute =
  PrivateConfigureConfigureIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => PrivateConfigureConfigureRoute,
  } as any).lazy(() =>
    import('./routes/_private/_configure/configure/index.lazy').then(
      (d) => d.Route,
    ),
  )

const PrivateSubscribeProIndexRoute = PrivateSubscribeProIndexImport.update({
  id: '/subscribe/pro/',
  path: '/subscribe/pro/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateCheckoutStatusIndexRoute = PrivateCheckoutStatusIndexImport.update(
  {
    id: '/checkout/status/',
    path: '/checkout/status/',
    getParentRoute: () => PrivateRoute,
  } as any,
)

const PrivateConfigureConfigureSettingsRoute =
  PrivateConfigureConfigureSettingsImport.update({
    id: '/_settings',
    getParentRoute: () => PrivateConfigureConfigureRoute,
  } as any)

const PrivateConfigureConfigureSettingsSettingsIndexRoute =
  PrivateConfigureConfigureSettingsSettingsIndexImport.update({
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => PrivateConfigureConfigureSettingsRoute,
  } as any).lazy(() =>
    import(
      './routes/_private/_configure/configure/_settings/settings/index.lazy'
    ).then((d) => d.Route),
  )

const PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyRoute =
  PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyImport.update({
    id: '/settings/appearance/',
    path: '/settings/appearance/',
    getParentRoute: () => PrivateConfigureConfigureSettingsRoute,
  } as any).lazy(() =>
    import(
      './routes/_private/_configure/configure/_settings/settings/appearance/index.lazy'
    ).then((d) => d.Route),
  )

const PrivateConfigureConfigureSettingsSettingsSubscriptionIndexRoute =
  PrivateConfigureConfigureSettingsSettingsSubscriptionIndexImport.update({
    id: '/settings/subscription/',
    path: '/settings/subscription/',
    getParentRoute: () => PrivateConfigureConfigureSettingsRoute,
  } as any).lazy(() =>
    import(
      './routes/_private/_configure/configure/_settings/settings/subscription/index.lazy'
    ).then((d) => d.Route),
  )

const PrivateConfigureConfigureSettingsSettingsCustomDomainIndexRoute =
  PrivateConfigureConfigureSettingsSettingsCustomDomainIndexImport.update({
    id: '/settings/custom-domain/',
    path: '/settings/custom-domain/',
    getParentRoute: () => PrivateConfigureConfigureSettingsRoute,
  } as any).lazy(() =>
    import(
      './routes/_private/_configure/configure/_settings/settings/custom-domain/index.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_private/_configure': {
      id: '/_private/_configure'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateConfigureImport
      parentRoute: typeof PrivateImport
    }
    '/_private/no-organization': {
      id: '/_private/no-organization'
      path: '/no-organization'
      fullPath: '/no-organization'
      preLoaderRoute: typeof PrivateNoOrganizationImport
      parentRoute: typeof PrivateImport
    }
    '/_public/auth': {
      id: '/_public/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof PublicAuthImport
      parentRoute: typeof PublicImport
    }
    '/_private/': {
      id: '/_private/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateIndexLazyImport
      parentRoute: typeof PrivateImport
    }
    '/_private/blogs/$blog-id': {
      id: '/_private/blogs/$blog-id'
      path: '/blogs/$blog-id'
      fullPath: '/blogs/$blog-id'
      preLoaderRoute: typeof PrivateBlogsBlogIdRouteImport
      parentRoute: typeof PrivateImport
    }
    '/_private/users/$user-id': {
      id: '/_private/users/$user-id'
      path: '/users/$user-id'
      fullPath: '/users/$user-id'
      preLoaderRoute: typeof PrivateUsersUserIdRouteImport
      parentRoute: typeof PrivateImport
    }
    '/_private/blogs/': {
      id: '/_private/blogs/'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof PrivateBlogsIndexImport
      parentRoute: typeof PrivateImport
    }
    '/_private/users/': {
      id: '/_private/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof PrivateUsersIndexLazyImport
      parentRoute: typeof PrivateImport
    }
    '/_private/_configure/configure': {
      id: '/_private/_configure/configure'
      path: '/configure'
      fullPath: '/configure'
      preLoaderRoute: typeof PrivateConfigureConfigureImport
      parentRoute: typeof PrivateConfigureImport
    }
    '/_private/_configure/configure/_settings': {
      id: '/_private/_configure/configure/_settings'
      path: '/configure'
      fullPath: '/configure'
      preLoaderRoute: typeof PrivateConfigureConfigureSettingsImport
      parentRoute: typeof PrivateConfigureConfigureRoute
    }
    '/_private/checkout/status/': {
      id: '/_private/checkout/status/'
      path: '/checkout/status'
      fullPath: '/checkout/status'
      preLoaderRoute: typeof PrivateCheckoutStatusIndexImport
      parentRoute: typeof PrivateImport
    }
    '/_private/subscribe/pro/': {
      id: '/_private/subscribe/pro/'
      path: '/subscribe/pro'
      fullPath: '/subscribe/pro'
      preLoaderRoute: typeof PrivateSubscribeProIndexImport
      parentRoute: typeof PrivateImport
    }
    '/_private/_configure/configure/': {
      id: '/_private/_configure/configure/'
      path: '/'
      fullPath: '/configure/'
      preLoaderRoute: typeof PrivateConfigureConfigureIndexLazyImport
      parentRoute: typeof PrivateConfigureConfigureImport
    }
    '/_private/_configure/configure/_settings/settings/': {
      id: '/_private/_configure/configure/_settings/settings/'
      path: '/settings'
      fullPath: '/configure/settings'
      preLoaderRoute: typeof PrivateConfigureConfigureSettingsSettingsIndexImport
      parentRoute: typeof PrivateConfigureConfigureSettingsImport
    }
    '/_private/_configure/configure/_settings/settings/custom-domain/': {
      id: '/_private/_configure/configure/_settings/settings/custom-domain/'
      path: '/settings/custom-domain'
      fullPath: '/configure/settings/custom-domain'
      preLoaderRoute: typeof PrivateConfigureConfigureSettingsSettingsCustomDomainIndexImport
      parentRoute: typeof PrivateConfigureConfigureSettingsImport
    }
    '/_private/_configure/configure/_settings/settings/subscription/': {
      id: '/_private/_configure/configure/_settings/settings/subscription/'
      path: '/settings/subscription'
      fullPath: '/configure/settings/subscription'
      preLoaderRoute: typeof PrivateConfigureConfigureSettingsSettingsSubscriptionIndexImport
      parentRoute: typeof PrivateConfigureConfigureSettingsImport
    }
    '/_private/_configure/configure/_settings/settings/appearance/': {
      id: '/_private/_configure/configure/_settings/settings/appearance/'
      path: '/settings/appearance'
      fullPath: '/configure/settings/appearance'
      preLoaderRoute: typeof PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyImport
      parentRoute: typeof PrivateConfigureConfigureSettingsImport
    }
  }
}

// Create and export the route tree

interface PrivateConfigureConfigureSettingsRouteChildren {
  PrivateConfigureConfigureSettingsSettingsIndexRoute: typeof PrivateConfigureConfigureSettingsSettingsIndexRoute
  PrivateConfigureConfigureSettingsSettingsCustomDomainIndexRoute: typeof PrivateConfigureConfigureSettingsSettingsCustomDomainIndexRoute
  PrivateConfigureConfigureSettingsSettingsSubscriptionIndexRoute: typeof PrivateConfigureConfigureSettingsSettingsSubscriptionIndexRoute
  PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyRoute: typeof PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyRoute
}

const PrivateConfigureConfigureSettingsRouteChildren: PrivateConfigureConfigureSettingsRouteChildren =
  {
    PrivateConfigureConfigureSettingsSettingsIndexRoute:
      PrivateConfigureConfigureSettingsSettingsIndexRoute,
    PrivateConfigureConfigureSettingsSettingsCustomDomainIndexRoute:
      PrivateConfigureConfigureSettingsSettingsCustomDomainIndexRoute,
    PrivateConfigureConfigureSettingsSettingsSubscriptionIndexRoute:
      PrivateConfigureConfigureSettingsSettingsSubscriptionIndexRoute,
    PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyRoute:
      PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyRoute,
  }

const PrivateConfigureConfigureSettingsRouteWithChildren =
  PrivateConfigureConfigureSettingsRoute._addFileChildren(
    PrivateConfigureConfigureSettingsRouteChildren,
  )

interface PrivateConfigureConfigureRouteChildren {
  PrivateConfigureConfigureSettingsRoute: typeof PrivateConfigureConfigureSettingsRouteWithChildren
  PrivateConfigureConfigureIndexLazyRoute: typeof PrivateConfigureConfigureIndexLazyRoute
}

const PrivateConfigureConfigureRouteChildren: PrivateConfigureConfigureRouteChildren =
  {
    PrivateConfigureConfigureSettingsRoute:
      PrivateConfigureConfigureSettingsRouteWithChildren,
    PrivateConfigureConfigureIndexLazyRoute:
      PrivateConfigureConfigureIndexLazyRoute,
  }

const PrivateConfigureConfigureRouteWithChildren =
  PrivateConfigureConfigureRoute._addFileChildren(
    PrivateConfigureConfigureRouteChildren,
  )

interface PrivateConfigureRouteChildren {
  PrivateConfigureConfigureRoute: typeof PrivateConfigureConfigureRouteWithChildren
}

const PrivateConfigureRouteChildren: PrivateConfigureRouteChildren = {
  PrivateConfigureConfigureRoute: PrivateConfigureConfigureRouteWithChildren,
}

const PrivateConfigureRouteWithChildren =
  PrivateConfigureRoute._addFileChildren(PrivateConfigureRouteChildren)

interface PrivateRouteChildren {
  PrivateConfigureRoute: typeof PrivateConfigureRouteWithChildren
  PrivateNoOrganizationRoute: typeof PrivateNoOrganizationRoute
  PrivateIndexLazyRoute: typeof PrivateIndexLazyRoute
  PrivateBlogsBlogIdRouteRoute: typeof PrivateBlogsBlogIdRouteRoute
  PrivateUsersUserIdRouteRoute: typeof PrivateUsersUserIdRouteRoute
  PrivateBlogsIndexRoute: typeof PrivateBlogsIndexRoute
  PrivateUsersIndexLazyRoute: typeof PrivateUsersIndexLazyRoute
  PrivateCheckoutStatusIndexRoute: typeof PrivateCheckoutStatusIndexRoute
  PrivateSubscribeProIndexRoute: typeof PrivateSubscribeProIndexRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateConfigureRoute: PrivateConfigureRouteWithChildren,
  PrivateNoOrganizationRoute: PrivateNoOrganizationRoute,
  PrivateIndexLazyRoute: PrivateIndexLazyRoute,
  PrivateBlogsBlogIdRouteRoute: PrivateBlogsBlogIdRouteRoute,
  PrivateUsersUserIdRouteRoute: PrivateUsersUserIdRouteRoute,
  PrivateBlogsIndexRoute: PrivateBlogsIndexRoute,
  PrivateUsersIndexLazyRoute: PrivateUsersIndexLazyRoute,
  PrivateCheckoutStatusIndexRoute: PrivateCheckoutStatusIndexRoute,
  PrivateSubscribeProIndexRoute: PrivateSubscribeProIndexRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface PublicRouteChildren {
  PublicAuthRoute: typeof PublicAuthRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicAuthRoute: PublicAuthRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof PrivateIndexLazyRoute
  '': typeof PrivateConfigureRouteWithChildren
  '/no-organization': typeof PrivateNoOrganizationRoute
  '/auth': typeof PublicAuthRoute
  '/blogs/$blog-id': typeof PrivateBlogsBlogIdRouteRoute
  '/users/$user-id': typeof PrivateUsersUserIdRouteRoute
  '/blogs': typeof PrivateBlogsIndexRoute
  '/users': typeof PrivateUsersIndexLazyRoute
  '/configure': typeof PrivateConfigureConfigureSettingsRouteWithChildren
  '/checkout/status': typeof PrivateCheckoutStatusIndexRoute
  '/subscribe/pro': typeof PrivateSubscribeProIndexRoute
  '/configure/': typeof PrivateConfigureConfigureIndexLazyRoute
  '/configure/settings': typeof PrivateConfigureConfigureSettingsSettingsIndexRoute
  '/configure/settings/custom-domain': typeof PrivateConfigureConfigureSettingsSettingsCustomDomainIndexRoute
  '/configure/settings/subscription': typeof PrivateConfigureConfigureSettingsSettingsSubscriptionIndexRoute
  '/configure/settings/appearance': typeof PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof PrivateIndexLazyRoute
  '': typeof PrivateConfigureRouteWithChildren
  '/no-organization': typeof PrivateNoOrganizationRoute
  '/auth': typeof PublicAuthRoute
  '/blogs/$blog-id': typeof PrivateBlogsBlogIdRouteRoute
  '/users/$user-id': typeof PrivateUsersUserIdRouteRoute
  '/blogs': typeof PrivateBlogsIndexRoute
  '/users': typeof PrivateUsersIndexLazyRoute
  '/configure': typeof PrivateConfigureConfigureIndexLazyRoute
  '/checkout/status': typeof PrivateCheckoutStatusIndexRoute
  '/subscribe/pro': typeof PrivateSubscribeProIndexRoute
  '/configure/settings': typeof PrivateConfigureConfigureSettingsSettingsIndexRoute
  '/configure/settings/custom-domain': typeof PrivateConfigureConfigureSettingsSettingsCustomDomainIndexRoute
  '/configure/settings/subscription': typeof PrivateConfigureConfigureSettingsSettingsSubscriptionIndexRoute
  '/configure/settings/appearance': typeof PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_private': typeof PrivateRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_private/_configure': typeof PrivateConfigureRouteWithChildren
  '/_private/no-organization': typeof PrivateNoOrganizationRoute
  '/_public/auth': typeof PublicAuthRoute
  '/_private/': typeof PrivateIndexLazyRoute
  '/_private/blogs/$blog-id': typeof PrivateBlogsBlogIdRouteRoute
  '/_private/users/$user-id': typeof PrivateUsersUserIdRouteRoute
  '/_private/blogs/': typeof PrivateBlogsIndexRoute
  '/_private/users/': typeof PrivateUsersIndexLazyRoute
  '/_private/_configure/configure': typeof PrivateConfigureConfigureRouteWithChildren
  '/_private/_configure/configure/_settings': typeof PrivateConfigureConfigureSettingsRouteWithChildren
  '/_private/checkout/status/': typeof PrivateCheckoutStatusIndexRoute
  '/_private/subscribe/pro/': typeof PrivateSubscribeProIndexRoute
  '/_private/_configure/configure/': typeof PrivateConfigureConfigureIndexLazyRoute
  '/_private/_configure/configure/_settings/settings/': typeof PrivateConfigureConfigureSettingsSettingsIndexRoute
  '/_private/_configure/configure/_settings/settings/custom-domain/': typeof PrivateConfigureConfigureSettingsSettingsCustomDomainIndexRoute
  '/_private/_configure/configure/_settings/settings/subscription/': typeof PrivateConfigureConfigureSettingsSettingsSubscriptionIndexRoute
  '/_private/_configure/configure/_settings/settings/appearance/': typeof PrivateConfigureConfigureSettingsSettingsAppearanceIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/no-organization'
    | '/auth'
    | '/blogs/$blog-id'
    | '/users/$user-id'
    | '/blogs'
    | '/users'
    | '/configure'
    | '/checkout/status'
    | '/subscribe/pro'
    | '/configure/'
    | '/configure/settings'
    | '/configure/settings/custom-domain'
    | '/configure/settings/subscription'
    | '/configure/settings/appearance'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/no-organization'
    | '/auth'
    | '/blogs/$blog-id'
    | '/users/$user-id'
    | '/blogs'
    | '/users'
    | '/configure'
    | '/checkout/status'
    | '/subscribe/pro'
    | '/configure/settings'
    | '/configure/settings/custom-domain'
    | '/configure/settings/subscription'
    | '/configure/settings/appearance'
  id:
    | '__root__'
    | '/'
    | '/_private'
    | '/_public'
    | '/_private/_configure'
    | '/_private/no-organization'
    | '/_public/auth'
    | '/_private/'
    | '/_private/blogs/$blog-id'
    | '/_private/users/$user-id'
    | '/_private/blogs/'
    | '/_private/users/'
    | '/_private/_configure/configure'
    | '/_private/_configure/configure/_settings'
    | '/_private/checkout/status/'
    | '/_private/subscribe/pro/'
    | '/_private/_configure/configure/'
    | '/_private/_configure/configure/_settings/settings/'
    | '/_private/_configure/configure/_settings/settings/custom-domain/'
    | '/_private/_configure/configure/_settings/settings/subscription/'
    | '/_private/_configure/configure/_settings/settings/appearance/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  PrivateRoute: typeof PrivateRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_private",
        "/_public"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/_configure",
        "/_private/no-organization",
        "/_private/",
        "/_private/blogs/$blog-id",
        "/_private/users/$user-id",
        "/_private/blogs/",
        "/_private/users/",
        "/_private/checkout/status/",
        "/_private/subscribe/pro/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/auth"
      ]
    },
    "/_private/_configure": {
      "filePath": "_private/_configure.tsx",
      "parent": "/_private",
      "children": [
        "/_private/_configure/configure"
      ]
    },
    "/_private/no-organization": {
      "filePath": "_private/no-organization.tsx",
      "parent": "/_private"
    },
    "/_public/auth": {
      "filePath": "_public/auth.tsx",
      "parent": "/_public"
    },
    "/_private/": {
      "filePath": "_private/index.lazy.tsx",
      "parent": "/_private"
    },
    "/_private/blogs/$blog-id": {
      "filePath": "_private/blogs/$blog-id/route.tsx",
      "parent": "/_private"
    },
    "/_private/users/$user-id": {
      "filePath": "_private/users/$user-id/route.tsx",
      "parent": "/_private"
    },
    "/_private/blogs/": {
      "filePath": "_private/blogs/index.tsx",
      "parent": "/_private"
    },
    "/_private/users/": {
      "filePath": "_private/users/index.lazy.tsx",
      "parent": "/_private"
    },
    "/_private/_configure/configure": {
      "filePath": "_private/_configure/configure",
      "parent": "/_private/_configure",
      "children": [
        "/_private/_configure/configure/_settings",
        "/_private/_configure/configure/"
      ]
    },
    "/_private/_configure/configure/_settings": {
      "filePath": "_private/_configure/configure/_settings.tsx",
      "parent": "/_private/_configure/configure",
      "children": [
        "/_private/_configure/configure/_settings/settings/",
        "/_private/_configure/configure/_settings/settings/custom-domain/",
        "/_private/_configure/configure/_settings/settings/subscription/",
        "/_private/_configure/configure/_settings/settings/appearance/"
      ]
    },
    "/_private/checkout/status/": {
      "filePath": "_private/checkout/status/index.tsx",
      "parent": "/_private"
    },
    "/_private/subscribe/pro/": {
      "filePath": "_private/subscribe/pro/index.tsx",
      "parent": "/_private"
    },
    "/_private/_configure/configure/": {
      "filePath": "_private/_configure/configure/index.lazy.tsx",
      "parent": "/_private/_configure/configure"
    },
    "/_private/_configure/configure/_settings/settings/": {
      "filePath": "_private/_configure/configure/_settings/settings/index.tsx",
      "parent": "/_private/_configure/configure/_settings"
    },
    "/_private/_configure/configure/_settings/settings/custom-domain/": {
      "filePath": "_private/_configure/configure/_settings/settings/custom-domain/index.tsx",
      "parent": "/_private/_configure/configure/_settings"
    },
    "/_private/_configure/configure/_settings/settings/subscription/": {
      "filePath": "_private/_configure/configure/_settings/settings/subscription/index.tsx",
      "parent": "/_private/_configure/configure/_settings"
    },
    "/_private/_configure/configure/_settings/settings/appearance/": {
      "filePath": "_private/_configure/configure/_settings/settings/appearance/index.lazy.tsx",
      "parent": "/_private/_configure/configure/_settings"
    }
  }
}
ROUTE_MANIFEST_END */
