---
description: Frontend Dashboard Application Conventions - Developer Onboarding
globs: apps/dash/src/**/*.tsx
---

## Welcome to the Dashboard Frontend Codebase!

This document outlines the key conventions and architectural patterns you'll need to follow while working on the Dashboard frontend application. Please read this carefully to ensure consistency and maintainability of the codebase.

## Application Architecture Overview

The frontend is built using **React** and a modern set of tools. Here's a breakdown of the core technologies and their roles:

-   **React:** The primary JavaScript library for building the user interface. We use functional components and hooks extensively.
-   **TanStack Router:** Handles all client-side routing and navigation within the application. It also plays a role in our build process.
-   **`src/main.tsx`:** This is the entry point of the application. It initializes React, sets up our routing, and configures global providers.
-   **`src/components/`:** This directory contains all our reusable UI components, organized by feature or general purpose.
-   **`src/routes/`:** Defines the application's routing structure using TanStack Router. You'll find files here that map URLs to specific components or data loading logic.
-   **`shadcn/ui`:** Our UI library, providing pre-styled and accessible components that you can use to build the interface.
-   **Zustand (`src/store/`)**: Used for managing global application state that needs to be shared across different parts of the app (e.g., user authentication, current organization).
-   **TanStack Query (`src/providers/react-query.tsx`)**: Manages our interaction with the backend API, handling data fetching, caching, and updates.
-   **Axios (`src/lib/axios.ts`)**: The HTTP client we use to make requests to the backend API.

## Routing Guidelines (`src/routes/`)

When working with application navigation, remember these points about our routing setup in `src/routes/`:

### Main Router Configuration (`src/main.tsx`)

-   The `createRouter` function here is where our main routing logic is initialized. It uses a `routeTree` (likely auto-generated) to understand all available routes.
-   Pay attention to the `Wrap` component â€“ it applies global functionality like syncing router state with URLs and providing notification toasts.

```typescript
// src/main.tsx Snippet (for reference)
const router = createRouter({
    routeTree,
    defaultPreload: false,
    context: { queryClient },
    defaultNotFoundComponent: NotFoundError,
    defaultErrorComponent: GeneralError,
    Wrap: ({ children }) => {
        return (
            <NuqsAdapter>
                {children}
                <Toaster />
            </NuqsAdapter>
        );
    },
});
```

### Defining Routes (`src/routes/**/*.ts` or `.tsx`)

-   Use `createFileRoute` for standard page routes and `createLazyFileRoute` for routes where you want to load components on demand.
-   For dynamic parts of a URL (like a blog post ID), use the `$` prefix in the filename and path (e.g., `$journey-id`).
-   If a page needs to fetch data before it renders, define a `loader` function in the route file. The data fetched here will be available in your component via `Route.useLoaderData()`.
-   You can also define a `pendingComponent` to show a loading state while the `loader` is running.

```typescript
// src/routes/journey/$journey-id/route.ts Snippet (for reference)
import { createFileRoute } from "@tanstack/react-router";
import { Loader } from "lucide-react";
import { getBlog } from "~/actions/blog";
import { PlateEditor } from "~/components/editor/plate-editor";

export const Route = createFileRoute("/journey/$journey-id")({
    validateSearch: () => ({}),
    loader: async ({ params }) => {
        return getBlog(params["journey-id"]);
    },
    pendingComponent: () => (
        <div className="flex size-full items-center justify-center">
            <Loader className="animate-spin" />
        </div>
    ),
    component: RouteComponent,
});

function RouteComponent() {
    const blog = Route.useLoaderData();
    return (
        <main className="flex size-full flex-col gap-y-2 p-4">
            <div data-registry="plate" className="...">
                <PlateEditor blog={blog} />
            </div>
        </main>
    );
}
```

## Component Development (`src/components/`)

When building UI elements, keep these guidelines in mind:

### Component Organization

-   Organize your components within `src/components/` in a way that makes sense for the feature you're working on. Use subdirectories to group related components.

### Functional Components and Hooks

-   Write new components as functional components using arrow function syntax.
-   Leverage React Hooks (`useState`, `useEffect`, and our custom hooks in `src/hooks/`) for managing state and side effects within your components.

### Using `shadcn/ui`

-   Whenever possible, use the pre-built components from the `shadcn/ui` library. This ensures a consistent look and feel across the application. You'll find these components often in `src/components/ui/`.

### Data Table Component (`src/components/data-table/`)

-   If you need to display data in a table format, use the `DataTable` component. It's designed to be reusable and provides built-in functionality for sorting, filtering, and pagination, powered by the `useDataTable` hook.

```typescript
// src/components/blogs/list/index.tsx Snippet (for reference)
import { DataTable } from "~/components/data-table";
import { useDataTable } from "~/hooks/use-data-table";

// ...

    return (
        <section className="">
            <DataTable table={table} className="..." />
            {/* ... */}
        </section>
    );
```

### Rich Text Editor (`src/components/editor/`)

-   For any rich text editing functionality, use the `PlateEditor` component. It's based on the PlateJS library, which is highly customizable.
-   If you need to add custom features or UI elements to the editor, look into the files within `src/components/editor/plugins/` and `src/components/plate-ui/`.

### Sidebar Navigation (`src/components/sidebar/`)

-   The main navigation for the application is in the sidebar. The `NavMain` component defines the links based on our routes. If you need to add or modify navigation items, this is the place to do it.

```typescript
// src/components/sidebar/nav-main.tsx Snippet (for reference)
import { Link, useLocation } from "@tanstack/react-router";
import { LayoutDashboard, Newspaper, Users, Cog } from "lucide-react";
import { SidebarGroup, SidebarGroupLabel, SidebarMenu, SidebarMenuItem, SidebarMenuButton } from "./sidebar";

// ...

    return (
        <SidebarGroup>
            <SidebarGroupLabel>Platform</SidebarGroupLabel>
            <SidebarMenu>
                {navItems.map((item) => (
                    <SidebarMenuItem key={item.title}>
                        <SidebarMenuButton asChild isActive={item.isActive} tooltip={item.title}>
                            <Link to={item.url}>
                                <item.icon />
                                <span>{item.title}</span>
                            </Link>
                        </SidebarMenuButton>
                    </SidebarMenuItem>
                ))}
            </SidebarMenu>
        </SidebarGroup>
    );
}
```

## State Management Practices

We use a combination of state management techniques:

### Local Component State

-   Use `useState` for simple state that's only needed within a single component.
-   Consider `useReducer` if you have more complex state logic within a component.

### Global State with Zustand (`src/store/`)

-   For state that needs to be accessed and updated from various parts of the application (like user authentication or the currently active organization), we use Zustand.
-   When adding new global state, create a new store or modify an existing one in the `src/store/` directory.

```typescript
// src/store/auth.ts Snippet (for reference)
import { create } from "zustand";

interface AuthState {
    profile?: Profile;
    loggedIn: boolean;
    token?: string;
    login: () => Promise<void>;
    logout: () => void;
}

export const _useAuthStore = create<AuthState>()((set, get) => ({
    profile: undefined,
    loggedIn: false,
    token: undefined,
    login: async () => { /* ... */ },
    logout: () => { /* ... */ },
}));
```

### Server State with TanStack Query (`src/providers/react-query.tsx`)

-   For managing data fetched from the backend, we rely on TanStack Query. This handles caching, background updates, and makes it easier to work with asynchronous data.
-   You'll often see TanStack Query used within our custom hooks in the `src/hooks/` directory.

## API Interaction (`src/lib/axios.ts`, `src/actions/`)

Here's how we handle communication with the backend:

### Axios Configuration (`src/lib/axios.ts`)

-   All API requests go through our configured Axios client. It automatically handles setting the base URL and attaching the authentication token to requests.
-   It also manages the `Content-Type` header, especially for `FormData` requests.

```typescript
// src/lib/axios.ts Snippet (for reference)
import axios from "axios";
import { getToken } from "~/store/auth";

const apiClient = axios.create({ baseURL: import.meta.env.VITE_URL });

apiClient.interceptors.request.use((config) => {
    const token = getToken();
    if (token) config.headers.Authorization = `Bearer ${token}`;
    if (config.data instanceof FormData) delete config.headers["Content-Type"];
    config.headers.Accept = config.headers.Accept ?? "application/json";
    return config;
});

export default apiClient;
```

### API Action Functions (`src/actions/`)

-   All logic for making API calls is encapsulated in functions within the `src/actions/` directory. Create new files or modify existing ones here when you need to interact with the backend.
-   These functions use the `apiClient` to make the actual requests.

```typescript
// src/actions/blog/index.ts Snippet (for reference)
import apiClient from "~/lib/axios";
import type { Blog, BlogMetadata } from "~/interface/blog";

export const getBlog = async (id: string) =>
    apiClient
        .get<Blog & { metadata: BlogMetadata }>("blogs/" + id)
        .then((r) => r.data);

export const patchBlogs = async (id: string, values: Partial<...>) => {
    const formData = new FormData();
    // ... logic to populate formData ...
    return apiClient.patch<Blog>("blogs/" + id, formData).then((r) => r.data);
};
```

### Authentication Flow

-   User authentication is managed by the `auth` Zustand store and the `@plobbo/auth/client` library. Refer to `src/store/auth.ts` to understand how login, logout, and token management are handled. The `getToken` function in this store provides the necessary access token for API calls.

## Custom Hooks (`src/hooks/`)

We have several custom hooks in the `src/hooks/` directory that provide reusable functionality:

-   **`useDataTable`:** Simplifies the implementation of data tables with sorting, filtering, and pagination.
-   **`useImageUpload`:** Handles the complexities of uploading images to the backend.
-   **`useDebouncedCallback`:** Helps optimize performance by delaying the execution of a callback function.

Use these hooks whenever their functionality is applicable to your work. If you find yourself repeating similar logic across components, consider creating a new custom hook.

## Utility Functions (`src/lib/`)

The `src/lib/` directory contains various utility functions that can be helpful:

-   **`axios.ts`:** (Already described)
-   **`auth/client.ts`:** Handles the core authentication logic.
-   **`utils.ts`:** Look here for general helper functions that might be useful.

## Error Handling

-   We have custom error components in `src/components/errors/` for displaying general errors and "not found" pages.
-   For specific API errors, handle them within the `action` functions and provide feedback to the user, often using the `Toaster` component for notifications.

## Code Style and Structure

-   Follow standard React best practices.
-   Ensure your code is well-formatted and easy to read.
-   Write clear and concise variable and function names.
-   Add comments where necessary to explain complex logic.

