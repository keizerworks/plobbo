---
description: Database Package Conventions (Drizzle ORM)
globs: packages/db/src/**/*.ts
---

## Architecture Overview

The database package provides structured access to the PostgreSQL database using Drizzle ORM. Key principles include:

-   **Drizzle ORM:** Primary tool for schema definition, migrations, and type-safe queries.
-   **Domain-Based Organization:** Schemas and data access logic are organized by domain within `src/[domain]/`.
-   **Namespace Repository Pattern:** Data access logic is implemented using static async functions within domain-specific TypeScript namespaces.
-   **Standardized Base Columns:** Common columns (`id`, `createdAt`, `updatedAt`) are included in tables via a base definition.
-   **Typed ID Generation:** Consistent ID generation using domain-specific prefixes and ULIDs.
-   **Centralized Connection:** A single database connection pool managed in `src/index.ts`.
-   **Migrations:** Drizzle Kit is used for schema migration management.

## Database Connection Configuration

The database connection pool (`node-postgres`) and Drizzle instance are configured in `src/index.ts`:

-   Connection details are sourced from SST resources (`Resource.pg`).
-   A global variable caches the pool instance in non-production environments to prevent issues during hot-reloading.
-   The Drizzle instance is created with `snake_case` casing enabled.
-   The `db` instance and all exports from `drizzle-orm` are exported for use in other packages.

```typescript
// packages/db/src/index.ts
import { drizzle } from "drizzle-orm/node-postgres";
import { Pool } from "pg";
import { Resource } from "sst/resource"; // Assuming SST resource bindings

// Global reference to prevent multiple pools during development
const globalForDb = globalThis as unknown as {
  pool: Pool | undefined;
};

// Database pool configuration
const pool =
  globalForDb.pool ??
  new Pool({
    host: Resource.pg.host,
    port: Resource.pg.port,
    user: Resource.pg.username,
    password: Resource.pg.password,
    database: Resource.pg.database,
    // Add pool size/timeout options here if needed
  });

// Keep pool reference in dev mode
if (process.env.NODE_ENV !== "production") {
  globalForDb.pool = pool;
}

// Create and export Drizzle instance
export const db = drizzle(pool, { casing: "snake_case" });
// Re-export drizzle-orm functions for convenience
export * from "drizzle-orm";
```

*(Note: `src/pg.ts` simply re-exports `* from "pg"`).*

## Domain Schema Structure (`*.sql.ts`)

Each domain's schema definition(s) reside in `.sql.ts` files within the domain directory (e.g., `src/blog/blog.sql.ts`):

-   Use `pgTable` from `drizzle-orm/pg-core` to define tables.
-   Import and spread the `baseTable` definition.
-   Define domain-specific columns with appropriate types (`varchar`, `text`, `timestamp`, `json`, `integer`, `boolean`, etc.) and constraints (`.notNull()`, `.default()`, etc.).
-   Use `pgEnum` to define PostgreSQL enums.
-   Define foreign key relationships using `.references(() => ReferencedTable.id, { onDelete: '...' })`. Cascade deletes are common.
-   Define Drizzle relations using `relations()` helper for potential use in ORM-style queries (though often supplemented by raw SQL selects).
-   Related tables (e.g., `BlogMetadataTable`) can be defined in the same or separate `.sql.ts` files within the domain directory.
-   These files typically focus only on schema definition; inferred types are usually exported from the namespace file.

```typescript
// packages/db/src/blog/blog.sql.ts Example
import { relations } from "drizzle-orm";
import { pgEnum, pgTable, text, timestamp, varchar, json } from "drizzle-orm/pg-core";
import { baseTable } from "../base-table"; // Import base columns
import { OrganizationMemberTable, OrganizationTable } from "../organization/organization.sql"; // Import related tables

// Define enums used in this table
export const BlogStatusEnum = pgEnum("blog_status", ["DRAFT", "PUBLISHED"]);

// Define main table
export const BlogTable = pgTable("blog", {
  ...baseTable("blog"), // Include base columns with prefix 'blg'

  // Foreign Keys
  organizationId: varchar({ length: 34 })
    .references(() => OrganizationTable.id, { onDelete: "cascade" })
    .notNull(),
  authorId: varchar({ length: 34 })
    .references(() => OrganizationMemberTable.id, { onDelete: "cascade" })
    .notNull(),

  // Domain-specific columns
  title: text().notNull(),
  slug: varchar({ length: 255 }).notNull(),
  image: varchar({ length: 255 }),
  body: json().array(), // Example JSON array column
  status: BlogStatusEnum().default("DRAFT"), // Example enum column
  publishedDate: timestamp({ withTimezone: true }),
  // ... other columns
});

// Define related table in the same file (optional)
export const BlogMetadataTable = pgTable("blog_metadata", {
  blogId: varchar({ length: 34 })
    .primaryKey()
    .references(() => BlogTable.id), // Foreign key back to BlogTable
  description: text().notNull(),
  // ... other metadata columns
});

// Define relation for potential ORM-style queries
export const BlogsRelation = relations(BlogTable, ({ one }) => ({
  blog_metadata: one(BlogMetadataTable), // Blog has one BlogMetadata
}));
```

## Namespace Repository Pattern

Data access logic is encapsulated within TypeScript **Namespaces** defined in the domain's `index.ts` or other relevant files (e.g., `metadata.ts`):

-   Each namespace (e.g., `export namespace Blog { ... }`) corresponds to a domain entity.
-   **Types:** Exports types derived from the schema tables using Drizzle's inference helpers:
    -   `Model`: Type for selected records (`InferSelectModel<typeof Table>`).
    * `CreateInput` / `Create`: Type for insert operations (`InferInsertModel<typeof Table>`).
    * `UpdateInput` / `Update`: Type for update operations (often `Partial<Omit<...>>`).
-   **Static Functions:** Exports `async` static functions for CRUD and query operations (e.g., `create`, `update`, `findById`, `findAll`, `count`, `remove`).
-   These functions directly use the global `db` instance and Drizzle's query builder (`db.select()`, `db.insert()`, etc.).
-   Complex queries involving joins or fetching related data often use raw SQL fragments (`sql<Type>\`...\``) with JSON aggregation to structure results efficiently.
-   Caching is **not** integrated at this layer in the provided examples.

```typescript
// packages/db/src/blog/index.ts Example (Blog Namespace)
import type { InferInsertModel, InferSelectModel } from "drizzle-orm";
import { db, eq, asc, desc, sql /* ... other drizzle operators */ } from "../index"; // Use exported db and operators
import { BlogTable, BlogMetadataTable /* ... other tables */ } from "./blog.sql";
import type { BlogMetadata } from "./metadata"; // Import types from related namespaces

export namespace Blog {
  // Export Types
  export type Model = InferSelectModel<typeof BlogTable>;
  export type CreateInput = InferInsertModel<typeof BlogTable>;
  export type UpdateInput = Partial<CreateInput> & { id: Model["id"] };

  // Export Columns Map (optional utility)
  export const columns = getTableColumns(BlogTable);

  // Export Static Data Access Functions
  export async function create(values: CreateInput): Promise<Model> {
    return (await db.insert(BlogTable).values(values).returning())[0]!;
  }

  export async function update({ id, ...input }: UpdateInput): Promise<Model | undefined> {
    const [blog] = await db
      .update(BlogTable)
      .set({ ...input, updatedAt: new Date() })
      .where(eq(BlogTable.id, id))
      .returning();
    return blog;
  }

  export async function findById(id: string): Promise<Model | undefined> {
     // Example using raw SQL JSON aggregation for related data
     const [blog] = await db
       .select({
         ...columns,
         metadata: sql<BlogMetadata.Model>`(SELECT to_json(t) FROM ${BlogMetadataTable} t WHERE t.blog_id = ${BlogTable.id})`.as("metadata"),
       })
       .from(BlogTable)
       .where(eq(BlogTable.id, id))
       .limit(1);
     return blog;
  }

  export async function findAll(/* params */): Promise<Model[]> {
     // ... complex query logic using db.select, joins, where, orderBy ...
     return await db.select(/* ... */).from(BlogTable)/*.innerJoin(...)*/.$dynamic()/*.where(...)*/;
  }

  export async function remove(id: string): Promise<void> {
    await db.delete(BlogTable).where(eq(BlogTable.id, id));
  }
  // ... other query functions like count, findOneBySlug, etc.
}
```

```typescript
// packages/db/src/blog/metadata.ts Example (BlogMetadata Namespace)
import type { InferInsertModel, InferSelectModel } from "drizzle-orm";
import { db, eq } from "../index";
import { BlogMetadataTable } from "./blog.sql";

export namespace BlogMetadata {
  // Export Types
  export type Model = InferSelectModel<typeof BlogMetadataTable>;
  export type Create = InferInsertModel<typeof BlogMetadataTable>;
  export type Update = Partial<Omit<Create, "blogId">> & { blogId: Create["blogId"] };

  // Export Static Data Access Functions
  export async function create(values: Create): Promise<Model> {
    return (await db.insert(BlogMetadataTable).values(values).returning())[0]!;
  }

  export async function update({ blogId, ...values }: Update): Promise<Model | undefined> {
    return (await db.update(BlogMetadataTable).set(values).where(eq(BlogMetadataTable.blogId, blogId)).returning())[0];
  }

  export async function findUnique(blogId: Model["blogId"]): Promise<Model | undefined> {
    return (await db.select().from(BlogMetadataTable).where(eq(BlogMetadataTable.blogId, blogId)).limit(1))[0];
  }
}
```

## Base Table Structure (`base-table.ts`)

All tables should include common fields defined in `src/base-table.ts`:

-   Uses a function `baseTable(type)` that takes the ID prefix key.
-   Returns an object containing `id`, `createdAt`, and `updatedAt` column definitions.
-   `id`: Primary key, `varchar(34)`, default value generated by `createId(type)`.
-   `createdAt`: Timestamp with timezone, non-null, defaults to current time.
-   `updatedAt`: Timestamp with timezone, non-null, defaults to current time, updates on row update (`$onUpdateFn`).
-   **Note:** Soft delete (`deletedAt`) is not included in this base definition.

```typescript
// packages/db/src/base-table.ts
import { timestamp, varchar } from "drizzle-orm/pg-core";
import type { type as idType } from "./id";
import { createId } from "./id";

export const baseTable = (type: keyof typeof idType) => ({
  id: varchar({ length: 34 })
    .$defaultFn(() => createId(type))
    .primaryKey(),
  createdAt: timestamp({ mode: "date", withTimezone: true })
    .defaultNow()
    .notNull(),
  updatedAt: timestamp({ mode: "date", withTimezone: true })
    .defaultNow()
    .$onUpdateFn(() => new Date())
    .notNull(),
});
```

## ID Generation (`id.ts`)

IDs are generated using a combination of a type-specific prefix and a ULID:

-   `src/id.ts` defines the `type` constant mapping entity names to short prefixes (e.g., `blog: "blg"`).
-   The `createId(type)` function generates the final ID string (e.g., `blg_01ARZ3NDEKTSV4RRFFQ69G5FAV`).

```typescript
// packages/db/src/id.ts
import { ulid } from "ulid";

// Domain-specific ID type prefixes
export const type = {
  user: "usr",
  blog: "blg",
  org: "org",
  // ... other prefixes
} as const;

// ID generator function
export const createId = (idType: keyof typeof type) =>
  [type[idType], ulid()].join("_");
```

## Migration Management (`drizzle.config.ts`, `migrations/`)

Schema migrations are handled using Drizzle Kit:

-   Configuration is defined in `drizzle.config.ts` at the package root.
-   Specifies the dialect (`postgresql`), output directory (`./migrations`), schema file pattern (`src/**/*.sql.ts`), and database credentials URL.
-   Run `drizzle-kit generate:pg` to create SQL migration files based on schema changes.
-   Run `drizzle-kit push:pg` (for development) or use a migration runner script (like `src/migrator.ts`, if present) with `db.migrate()` for production deployments.
-   Migration files are stored in the `/migrations` directory.

```typescript
// drizzle.config.ts
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  dialect: "postgresql",
  casing: "snake_case", // Match DB instance casing
  out: "./migrations",
  schema: ["../../packages/db/src/**/*.sql.ts"], // Point to schema files
  dbCredentials: { url: process.env.DATABASE_URL! }, // Get URL from environment
});
```

## General Conventions

-   **Naming:** Use `snake_case` for tables, columns, and enums, consistent with the Drizzle `casing` setting. Use camelCase for TypeScript variables, functions, and namespaces. Foreign keys typically follow `relatedEntityId` pattern (e.g., `organizationId`).
-   **Query Building:** Use Drizzle's type-safe query builder and operators. Use raw SQL (`sql`) sparingly, primarily for complex joins or features not directly supported by Drizzle, ensuring type safety with `sql<Type>`.
-   **Transactions:** Use `db.transaction(async (tx) => { ... })` for atomic operations. Pass the transaction object `tx` to repository functions if they need to participate in the transaction.
-   **Type Safety:** Rely heavily on Drizzle's inferred types (`InferSelectModel`, `InferInsertModel`) within the Namespace pattern.
-   **Error Handling:** Namespace functions should typically return `undefined` or `null` for "not found" scenarios. Handle potential database errors (e.g., constraint violations) using try/catch if necessary, or allow Drizzle errors to propagate.
-   **Soft Deletes:** Not implemented by default via `base-table.ts`. If needed, add a `deletedAt` timestamp column manually and filter in queries.
