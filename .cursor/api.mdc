---
description: Hono API Conventions
globs: packages/api/src/**/*.ts
---

## Architecture Overview

The API application is built using the **Hono** web framework and follows a handler-centric architecture deployed on Vercel.

-   **Framework:** Built with Hono.js.
-   **Entry Point:** `src/index.ts` initializes the main Hono app, applies global middleware, and registers routes/handlers.
-   **Handler Structure:** Endpoint logic resides primarily in `src/handlers/[resource]/[action].ts`. Each file typically exports a handler array created via a factory.
-   **Routing:** Defined in `src/index.ts` by mapping paths to handler arrays. Logically grouped routes sharing middleware/prefixes can be defined in separate Hono router files under `src/routes/`.
-   **Factory Pattern:** Uses `hono/factory` (`src/factory.ts`) to create typed handlers and middleware, ensuring consistency and access to context/environment variables.
-   **Middleware:** Centralized in `src/middleware/`, created using the factory, and applied per-route, per-router, or globally.
-   **Validation:** Uses Zod schemas with `@hono/zod-validator`.
-   **Deployment:** Deployed to Vercel using `hono/vercel`.

## Routing and Handler Conventions

### Main App Structure (`src/index.ts`)

The main application file (`src/index.ts`) must:

-   Initialize a Hono app (`new Hono()`).
-   Optionally set a base path (`.basePath('/api')`).
-   Apply global middleware (e.g., CORS) using `.use()`.
-   Define routes using HTTP methods (`.get()`, `.post()`, etc.), mapping paths to imported handler arrays using the spread operator (`...`).
-   Register separate router modules from `src/routes/` using `.route('/prefix', router)`.
-   Export the Vercel handler (`handle(app)`) and optionally `AppType`.

```typescript
// src/index.ts Example
import { Hono } from "hono/quick";
import { handle } from "hono/vercel";
import { cors } from "hono/cors"; // Example middleware

// Import handlers (exported as arrays)
import { listBlogsHanlder } from "./handlers/blogs/list";
import { postBlogHandler } from "./handlers/blogs/post";
// ... other handlers

// Import routers
import aiRouter from "./routes/ai";

const app = new Hono()
  .basePath("/api")
  .use(/* Global Middleware like CORS */)

  // Define routes using imported handler arrays
  .get("/blogs", ...listBlogsHanlder)
  .post("/blogs", ...postBlogHandler)
  // ... other routes

  // Register sub-routers
  .route("/ai", aiRouter);

export default handle(app);
export type AppType = typeof app;

```

### Handler Files (`src/handlers/**/*.ts`)

Handler files define the logic for specific endpoints and associated middleware:

-   Use the shared `factory` instance (`import { factory } from "@plobbo/api/factory";`).
-   Export a handler array using `factory.createHandlers([...middleware, finalHandler])`.
-   The array contains middleware functions (validation, auth) followed by the final asynchronous handler function.
-   The handler function receives Hono's context (`c`).
-   Business logic, database interactions (`@plobbo/db/...`), etc., are typically performed within the handler.
-   Return responses using context methods like `c.json(data, statusCode)`.

```typescript
// src/handlers/blogs/get.ts Example
import { zValidator } from "@hono/zod-validator";
import { z } from "zod";
import { factory } from "@plobbo/api/factory";
import { Blog } from "@plobbo/db/blog/index";

// Define validation schema
const paramsSchema = z.object({ id: z.string() });

export const getBlogHandler = factory.createHandlers(
  // Apply validation middleware
  zValidator("param", paramsSchema),
  // Final handler function
  async (c) => {
    const { id } = c.req.valid("param"); // Access validated data
    const blog = await Blog.findById(id);
    // Handle potential null blog (e.g., throw HTTPException 404)
    if (!blog) {
       // ... throw error ...
    }
    return c.json(blog); // Return JSON response
  },
);
```

```typescript
// src/handlers/blogs/post.ts Example (Protected)
import { zValidator } from "@hono/zod-validator";
import { HTTPException } from "hono/http-exception";
import { factory } from "@plobbo/api/factory";
import { enforeAuthMiddleware } from "@plobbo/api/middleware/auth"; // Auth middleware
import { enforeHasOrgMiddleware } from "@plobbo/api/middleware/org-protected"; // Specific authz middleware
import { Blog } from "@plobbo/db/blog/index";
import { createBlogSchema } from "@plobbo/validator/blog/create"; // External schema

export const postBlogHandler = factory.createHandlers(
  // Middleware Chain:
  enforeAuthMiddleware, // 1. Check authentication
  enforeHasOrgMiddleware("organizationId"), // 2. Check organization access
  zValidator("form", createBlogSchema), // 3. Validate request body

  // Final handler function
  async (c) => {
    const user = c.var.user; // Access user from auth middleware
    const organization = c.var.organization; // Access org data from authz middleware
    const body = c.req.valid("form"); // Access validated form data

    // Business logic...
    const blog = await Blog.create({ /* ... */ });
    if (!blog) {
      throw new HTTPException(400, { message: "Failed to create blog" });
    }

    return c.json(blog, 201); // Return 201 Created
  },
);

```

## Middleware Conventions (`src/middleware/**/*.ts`)

Middleware provides reusable request processing logic:

-   Create middleware using the shared factory (`factory.createMiddleware(...)`).
-   Middleware functions receive context (`c`) and `next` function.
-   Perform checks, modify the request, or manipulate the context (`c.set('key', value)`).
-   Call `await next()` to pass control to the next middleware or handler.
-   Throw `HTTPException` for errors that should halt the request.
-   Apply middleware within `factory.createHandlers`, globally (`app.use`), or per-router (`router.use`).

### Authentication (`src/middleware/auth.ts`)

-   The `enforeAuthMiddleware` handles Bearer token authentication.
-   Uses the `@plobbo/auth/client` to verify tokens against the OpenAuth issuer.
-   Expects an `Authorization: Bearer <token>` header.
-   Throws 401 `HTTPException` on missing/invalid tokens.
-   Sets the verified user properties into context: `c.set("user", verified.subject.properties)`.
-   Authenticated user data can be accessed in subsequent middleware/handlers via `c.var.user`.

```typescript
// src/middleware/auth.ts Structure
import { createMiddleware } from "hono/factory";
import { HTTPException } from "hono/http-exception";
import type { Subjects } from "@plobbo/auth/subjects";
import { client } from "@plobbo/auth/client";
import { subjects } from "@plobbo/auth/subjects";

// Define Env types if middleware interacts with context variables
interface Env {
  Variables: { user: Subjects };
}

export const enforeAuthMiddleware = createMiddleware<Env>(async (c, next) => {
  const authHeader = c.req.header("Authorization");
  // ... validation logic ...
  const token = authHeader.split(" ")[1];
  // ... validation logic ...
  const verified = await client.verify(subjects, token);
  if (verified.err) throw new HTTPException(401, verified.err);
  c.set("user", verified.subject.properties); // Set user in context
  await next(); // Proceed to next handler
});
```

## Validation Conventions

-   Use **Zod** to define validation schemas. Schemas can be inline or imported (e.g., from `@plobbo/validator`).
-   Use **`@hono/zod-validator`** middleware within `factory.createHandlers` to validate:
    -   URL Parameters: `zValidator("param", schema)`
    -   JSON Body: `zValidator("json", schema)`
    * Form Data: `zValidator("form", schema)`
    * Query Parameters: `zValidator("query", schema)`
    * Headers: `zValidator("header", schema)`
-   Access validated data via `c.req.valid("param" | "json" | "form" | ...)` in subsequent handlers.

```typescript
// Example using zValidator
import { zValidator } from "@hono/zod-validator";
import { z } from "zod";
import { factory } from "@plobbo/api/factory";

const querySchema = z.object({ page: z.coerce.number().int().positive().optional().default(1) });
const bodySchema = z.object({ name: z.string().min(3) });

export const exampleHandler = factory.createHandlers(
  zValidator("query", querySchema),
  zValidator("json", bodySchema),
  async (c) => {
    const { page } = c.req.valid("query");
    const { name } = c.req.valid("json");
    // ... use validated page and name ...
    return c.json({ receivedPage: page, receivedName: name });
  }
);
```

## Error Handling Conventions

-   For expected errors where a specific HTTP status code and message are appropriate, **throw `HTTPException`** from `hono/http-exception`.
-   Provide the status code and optionally a message payload.

```typescript
// Throwing an error within a handler or middleware
import { HTTPException } from "hono/http-exception";

async (c) => {
  // ... some logic ...
  if (someErrorCondition) {
    throw new HTTPException(400, { message: "Specific validation failed." });
  }
  if (notFoundCondition) {
    throw new HTTPException(404, { message: "Resource not found." });
  }
  // ... rest of handler ...
}
```

-   Unhandled errors thrown within handlers will typically result in a 500 Internal Server Error response by Hono.

## API Documentation (Swagger/OpenAPI)

The provided code doesn't show an explicit setup for generating OpenAPI specs (like Swagger UI). If API documentation is required, consider integrating `hono/swagger-ui` or other OpenAPI generation tools compatible with Hono and Zod. Conventions for schema descriptions would need to be established if this is added.

## Logging and Event Handling

Standardized conventions for application-wide logging or event handling (like the previous `emitter`) are not apparent in the provided core code snippets. Implement logging or event emission within handlers or middleware as needed, potentially using standard `console.log/warn/error` or integrating a dedicated logging library.
